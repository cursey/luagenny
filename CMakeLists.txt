# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(sdkgenny-lua)

if(CMKR_ROOT_PROJECT AND NOT CMKR_DISABLE_VCPKG)
	include(FetchContent)
	message(STATUS "Fetching vcpkg (2022.05.10)...")
	FetchContent_Declare(vcpkg URL "https://github.com/microsoft/vcpkg/archive/refs/tags/2022.05.10.tar.gz")
	FetchContent_GetProperties(vcpkg)
	if(NOT vcpkg_POPULATED)
		FetchContent_Populate(vcpkg)
		include("${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake")
	endif()
endif()

include(FetchContent)

message(STATUS "Fetching sdkgenny (f03026eaced3bd033e201bc7d1c9d9d348054113)...")
FetchContent_Declare(sdkgenny
	GIT_REPOSITORY
		"https://github.com/cursey/sdkgenny.git"
	GIT_TAG
		f03026eaced3bd033e201bc7d1c9d9d348054113
)
FetchContent_MakeAvailable(sdkgenny)

# Packages
find_package(fmt REQUIRED)

find_package(spdlog REQUIRED)

find_package(pegtl REQUIRED)

find_package(sol2 REQUIRED)

# Target sdkgenny-lua
set(CMKR_TARGET sdkgenny-lua)
set(sdkgenny-lua_SOURCES "")

list(APPEND sdkgenny-lua_SOURCES
	"src/Lua.cpp"
	"src/Lua.hpp"
)

list(APPEND sdkgenny-lua_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${sdkgenny-lua_SOURCES})
add_library(sdkgenny-lua STATIC)

if(sdkgenny-lua_SOURCES)
	target_sources(sdkgenny-lua PRIVATE ${sdkgenny-lua_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${sdkgenny-lua_SOURCES})

target_compile_features(sdkgenny-lua PUBLIC
	cxx_std_17
)

target_compile_options(sdkgenny-lua PUBLIC
	"/bigobj"
)

target_link_libraries(sdkgenny-lua PUBLIC
	fmt::fmt
	spdlog::spdlog
	sol2::sol2
	sdkgenny
)

if(${VCPKG_TARGET_TRIPLET} MATCHES ".+static") # static
	set_target_properties(sdkgenny-lua PROPERTIES
		MSVC_RUNTIME_LIBRARY
			"MultiThreaded$<$<CONFIG:Debug>:Debug>"
	)
endif()

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target test
set(CMKR_TARGET test)
set(test_SOURCES "")

list(APPEND test_SOURCES
	"test/Main.cpp"
)

list(APPEND test_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${test_SOURCES})
add_executable(test)

if(test_SOURCES)
	target_sources(test PRIVATE ${test_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT test)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${test_SOURCES})

target_compile_features(test PRIVATE
	cxx_std_17
)

target_include_directories(test PRIVATE
	src
)

target_link_libraries(test PRIVATE
	sdkgenny-lua
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

