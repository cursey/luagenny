# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()


project(luagenny)

if(CMKR_ROOT_PROJECT AND NOT CMKR_DISABLE_VCPKG)
	include(FetchContent)
	message(STATUS "Fetching vcpkg (2022.05.10)...")
	FetchContent_Declare(vcpkg URL "https://github.com/microsoft/vcpkg/archive/refs/tags/2022.05.10.tar.gz")
	FetchContent_GetProperties(vcpkg)
	if(NOT vcpkg_POPULATED)
		FetchContent_Populate(vcpkg)
		include("${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake")
	endif()
endif()

include(FetchContent)

message(STATUS "Fetching sdkgenny (eb06f76d72454394c4ef4f2da4fae05bb82db82a)...")
FetchContent_Declare(sdkgenny
	GIT_REPOSITORY
		"https://github.com/cursey/sdkgenny.git"
	GIT_TAG
		eb06f76d72454394c4ef4f2da4fae05bb82db82a
)
FetchContent_MakeAvailable(sdkgenny)

# Packages
find_package(pegtl REQUIRED)

find_package(lua)

find_package(sol2)

# Target luagenny
set(CMKR_TARGET luagenny)
set(luagenny_SOURCES "")

list(APPEND luagenny_SOURCES
	"src/LuaGenny.cpp"
	"src/classes/Array.cpp"
	"src/classes/Constant.cpp"
	"src/classes/Enum.cpp"
	"src/classes/Function.cpp"
	"src/classes/Namespace.cpp"
	"src/classes/Object.cpp"
	"src/classes/Parameter.cpp"
	"src/classes/Reference.cpp"
	"src/classes/Sdk.cpp"
	"src/classes/Struct.cpp"
	"src/classes/Type.cpp"
	"src/classes/Typename.cpp"
	"src/classes/Variable.cpp"
	"src/classes/VirtualFunction.cpp"
	"src/LuaGenny.hpp"
	"src/classes/Array.hpp"
	"src/classes/ClassMacros.hpp"
	"src/classes/Constant.hpp"
	"src/classes/Enum.hpp"
	"src/classes/Function.hpp"
	"src/classes/Namespace.hpp"
	"src/classes/Object.hpp"
	"src/classes/Parameter.hpp"
	"src/classes/Reference.hpp"
	"src/classes/Sdk.hpp"
	"src/classes/Struct.hpp"
	"src/classes/Type.hpp"
	"src/classes/Typename.hpp"
	"src/classes/Variable.hpp"
	"src/classes/VirtualFunction.hpp"
)

list(APPEND luagenny_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${luagenny_SOURCES})
add_library(luagenny STATIC)

if(luagenny_SOURCES)
	target_sources(luagenny PRIVATE ${luagenny_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${luagenny_SOURCES})

add_library(luagenny::luagenny ALIAS luagenny)
target_compile_features(luagenny PUBLIC
	cxx_std_20
)

target_compile_options(luagenny PUBLIC
	"/bigobj"
)

target_link_libraries(luagenny PUBLIC
	lua
	sol2::sol2
	sdkgenny
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target test
set(CMKR_TARGET test)
set(test_SOURCES "")

list(APPEND test_SOURCES
	"test/Main.cpp"
)

list(APPEND test_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${test_SOURCES})
add_executable(test)

if(test_SOURCES)
	target_sources(test PRIVATE ${test_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT test)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${test_SOURCES})

target_compile_features(test PRIVATE
	cxx_std_20
)

target_include_directories(test PRIVATE
	src
)

target_link_libraries(test PRIVATE
	lua
	sol2::sol2
	luagenny::luagenny
	sdkgenny::sdkgenny
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

install(
	TARGETS
		luagenny
		test
	DESTINATION
		bin
	COMPONENT
		luagenny
)
